from flask import jsonify, request, make_response, url_for
from flask_api import status
from app import app
from app.db.interface import PaymentService,PaymentNotFoundError

from app.error_handlers import DataValidationError

# Instantiate persistence service to be used in CRUD methods
payment_service = PaymentService()

# Error bodies
NOT_FOUND_ERROR_BODY = {'error': 'Payment with id {} could not be found'}
GENERAL_NOT_FOUND_ERROR = {'error': 'Requested resource(s) could not be found'}

######################################################################
# GET INDEX
######################################################################
@app.route('/')
def index():
    return jsonify(name='Payments REST API Service',
                   version='1.0',
                   docs=request.base_url + 'apidocs/index.html',
                   site=request.base_url + 'payments'), status.HTTP_200_OK
    #return app.send_static_file('index.html')

######################################################################
# LIST ALL PAYMENTS
######################################################################
@app.route('/payments', methods=['GET'])
def list_payments():
    request_args = request.args

    try:
        if 'ids' in request_args:
            # just retrieve a list of payments where each payment corresponds to one of the ids
            ids = request_args.getlist('ids', type=int)
            results = payment_service.get_payments(payment_ids=ids)

        elif request_args:
            # if there is anything else in the request args, query by those parameters;
            # flask puts the request_args into a proprietary data structure called ImmutableMultiDict
            # this cast allows us to make a simple dictionary where each query param is a key and the
            # value is a list that contains the value(s) of that query parameter
            request_args = dict(request_args)
            for key in request_args:
                request_args[key] = request_args[key][0]
            results = payment_service.get_payments(payment_attributes=request_args)

        else:
            # if no request args are present, simply return all payments
            results = payment_service.get_payments()

        return make_response(jsonify(results), status.HTTP_200_OK)

    except Exception:
        # we will want to make more specific exception handling later in order to differentiate
        # the case in which it's a 404 and the case where it's a 400 - we'll assume for now that
        # the client makes good requests for resources that may or may not exist
        return make_response(jsonify(GENERAL_NOT_FOUND_ERROR), status.HTTP_404_NOT_FOUND)

######################################################################
# CREATE PAYMENT
######################################################################
@app.route('/payments', methods=['POST'])
def create_payment():
    """
    Create a Payment
    This endpoint will create a Payment based on json request data
    ---
    tags:
      - Payment
    consumes:
      - application/json
    produces:
      - application/json
    parameters:
      - in: body
        name: body
        required: true
        schema:
          id: data
          required:
            - nickname
            - payment_type
            - user_id
            - details
          properties:
            nickname:
              type: string
              description: user-made nickname for payment method
              example: my credit
            user_id:
              type: integer
              description: foreign key id for user
              example: 1
            payment_type:
              type: string
              description: type of payment (credit, debit, paypal)
              example: credit
            details:
              schema:
                id: Detail
                properties:
                  user_name:
                    type: string
                    description: user name associated with payment method
                    example: Jimmy Jones
                  expires:
                    type: string
                    description: credit/debit card expiration date (mm/yyyy)
                    example: 02/2020
                  card_number:
                    type: string
                    description: 16-digit credit/debit card number
                    example: 1111222233334444
                  card_type:
                    type: integer
                    description: type of credit/debit card (Visa, Mastercard, etc.)
                    example: Visa
    responses:
      201:
        description: Payment created
        schema:
          type: array
          items:
            schema:
              id: Payment
              properties:
                id:
                  type: integer
                  description: id auto-generated by database
                nickname:
                  type: string
                  description: user-made nickname for payment method
                user_id:
                  type: integer
                  description: foreign key id for user
                payment_type:
                  type: string
                  description: type of payment (credit, debit, paypal)
                is_default:
                  type: boolean
                  description: signifies default payment method for purchases
                  default: false
                is_removed:
                  type: boolean
                  description: soft delete for removed payments with pending transactions
                  default: false
                charge_history:
                  type: float
                  description: history of purchase amounts for specified payment method
                  default: 0.0
                details:
                  schema:
                    id: details
                    properties:
                      user_name:
                        type: string
                        description: user name associated with payment method
                      expires:
                        type: string
                        description: credit/debit card expiration date (mm/yyyy)
                      card_number:
                        type: string
                        description: 16-digit credit/debit card number
                      card_type:
                        type: integer
                        description: type of credit/debit card (Visa, Mastercard, etc.)

      400:
        description: Bad Request (the posted data was not valid)
    """
    data = request.get_json(silent=True)
    try:
        payment = payment_service.add_payment(data)
        rc = status.HTTP_201_CREATED
        message = {"created" : payment}
    except DataValidationError as e:
        message = {"error" : e.message}
        rc = status.HTTP_400_BAD_REQUEST
    return make_response(jsonify(message), rc)

######################################################################
# SET DEFAULT PAYMENT (ACTION)
######################################################################
@app.route('/payments/<int:user_id>/set-default', methods=['PATCH'])
def set_default(user_id):
    """
      Set a default payment method for the specified user
      This endpoint will set a default payment for user specified in route and payment specified in json request data
      ---
      tags:
        - Payment
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: user_id
          in: path
          description: user id foreign key
          type: integer
          required: true
        - in: body
          name: body
          required: true
          schema:
            id: data
            required:
              - payment_id
            properties:
              payment_id:
                type: integer
                description: the id of the payment method being set as default
                example: 1
      responses:
        200:
          description: payment with specified id (in body) for specified user (in route) is now the default payment method for purchases
        400:
          description: Bad Request (bad data and/or no payment exists with specified id)
      """
    try:
        if not request.data:
            raise DataValidationError('Invalid request: body of request contained no data')
        if not request.is_json:
            raise DataValidationError('Invalid request: request not json')
        data = request.get_json()
        if data['payment_id']:
            resp = payment_service.perform_payment_action(user_id,payment_attributes=data)
            if resp == True:
                message = { 'success' : 'Payment with id: %s set as default for user with user_id: %s.' % (data['payment_id'], str(user_id)) }
                rc = status.HTTP_200_OK
            else:
                message = { 'error' : 'No Payment with id: %s was found for user with user_id: %s.' % (data['payment_id'], str(user_id)) }
                rc = status.HTTP_404_NOT_FOUND
    except DataValidationError as e:
        message = {'error' : e.message}
        rc = status.HTTP_400_BAD_REQUEST
    except KeyError as e:
        message = {'error' : 'Invalid request: body of request does not have the payment_id'}
        rc = status.HTTP_400_BAD_REQUEST

    return make_response(jsonify(message), rc)

######################################################################
# RETRIEVE A PAYMENT
######################################################################
@app.route('/payments/<int:id>', methods=['GET'])
def get_payments(id):
    try:
        result = payment_service.get_payments(payment_ids=[id])
        rc = status.HTTP_200_OK
    except Exception:
        message = 'Payment with id {} could not be found'.format(id)
        result = {'error': message }
        rc = status.HTTP_404_NOT_FOUND


    return make_response(jsonify(result), rc)

######################################################################
# UPDATE AN EXISTING PAYMENT
######################################################################
@app.route('/payments/<int:id>', methods=['PUT'])
def update_payments(id):
    try:
        if not request.is_json:
            raise DataValidationError('Invalid payment: Content Type is not json')
        data = request.get_json(silent=True)
        message = payment_service.update_payment(id,payment_replacement=data)
        rc = status.HTTP_200_OK
    except PaymentNotFoundError as e:
        message = e.message
        rc = status.HTTP_404_NOT_FOUND
    except DataValidationError as e:
        message = e.message
        rc = status.HTTP_400_BAD_REQUEST
    return make_response(jsonify(message), rc)

######################################################################
# UPDATE AN EXISTING PAYMENT PARTIALLY
######################################################################
@app.route('/payments/<int:id>', methods=['PATCH'])
def update_partial_payments(id):
    try:
        if not request.is_json:
            raise DataValidationError('Invalid payment: Content Type is not json')
        data = request.get_json(silent=True)
        message = payment_service.update_payment(id,payment_attributes=data)
        rc = status.HTTP_200_OK
    except PaymentNotFoundError as e:
        message = e.message
        rc = status.HTTP_404_NOT_FOUND
    except DataValidationError as e:
        message = e.message
        rc = status.HTTP_400_BAD_REQUEST
    return make_response(jsonify(message), rc)


######################################################################
# DELETE A PAYMENT
######################################################################
@app.route('/payments/<int:id>', methods=['DELETE'])
def delete_payments(id):
    """
    Delete a Payment
    This endpoint will 'soft-delete' a Payment associated with the ID in route
    ---
    tags:
      - Payment
    parameters:
      - name: id
        in: path
        description: ID of payment to soft delete
        type: integer
        required: true
    responses:
      204:
        description: Payment deleted
    """
    payment_service.remove_payment(payment_id=id)
    return '', status.HTTP_204_NO_CONTENT

######################################################################
# CHARGE PAYMENT (ACTION)
######################################################################
@app.route('/payments/<int:user_id>/charge', methods=['PATCH'])
def charge_payment(user_id):
    """
    Charge the specified user's default payment
    This endpoint will charge a user's default payment method an amount passed via json request data
    ---
    tags:
      - Payment
    consumes:
      - application/json
    produces:
      - application/json
    parameters:
      - name: user_id
        in: path
        description: user id foreign key
        type: integer
        required: true
      - in: body
        name: body
        required: true
        schema:
          id: data
          required:
            - amount
          properties:
            amount:
              type: float
              description: the dollar amount to be charged to the default payment method
              example: 19.99
    responses:
      200:
        description: Default payment has been charged the specified amount
      400:
        description: Bad Request (bad data and/or no default payment method set)
    """
    try:
        if not request.data:
            raise DataValidationError('Invalid request: body of request contained no data')
        if not request.is_json:
            raise DataValidationError('Invalid request: request not json')
        data = request.get_json()
        if data['amount']:
            if(data['amount'] < 0):
                raise DataValidationError('Invalid request: Order amount is negative.')
            else:
                resp = payment_service.perform_payment_action(user_id,payment_attributes=data)
                if resp == True:
                    message = {'success' : 'Default payment method for user_id: %s has been charged $%.2f' % (str(user_id), data['amount'])}
                    rc = status.HTTP_200_OK
    except DataValidationError as e:
        message = {'error' : e.message}
        rc = status.HTTP_400_BAD_REQUEST
    except KeyError as e:
        message = {'error' : 'Invalid request: body of request does not have the amount to be charged'}
        rc = status.HTTP_400_BAD_REQUEST
    return make_response(jsonify(message), rc)
